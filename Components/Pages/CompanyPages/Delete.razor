@page "/companies/delete"
@using Microsoft.EntityFrameworkCore
@using CompanyEditor.Models
@inject IDbContextFactory<CompanyEditor.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Company</h2>
    <hr />
    @if (company is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">OrgNumber</dt>
            <dd class="col-sm-10">@company.OrgNumber</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@company.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Adress</dt>
            <dd class="col-sm-10">@company.Adress</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AreaCode</dt>
            <dd class="col-sm-10">@company.AreaCode</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">City</dt>
            <dd class="col-sm-10">@company.City</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">EmailAdress</dt>
            <dd class="col-sm-10">@company.EmailAdress</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PhoneNumber</dt>
            <dd class="col-sm-10">@company.PhoneNumber</dd>
        </dl>
        <EditForm method="post" Model="company" OnValidSubmit="DeleteCompany" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(company is null)">Delete</button> |
            <a href="/companies">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Company? company;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        company = await context.Company.FirstOrDefaultAsync(m => m.Id == Id);

        if (company is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteCompany()
    {
        using var context = DbFactory.CreateDbContext();
        context.Company.Remove(company!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/companies");
    }
}
