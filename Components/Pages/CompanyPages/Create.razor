@page "/companies/create"
@using Microsoft.EntityFrameworkCore
@using CompanyEditor.Models
@inject IDbContextFactory<CompanyEditor.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@using Newtonsoft.Json.Linq;
@using System.Text.RegularExpressions;

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Company</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Company" OnValidSubmit="AddCompany" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="orgnumber" class="form-label">OrgNumber:</label> 
                <InputText id="orgnumber" @bind-Value="Company.OrgNumber" class="form-control" /> 
                <ValidationMessage For="() => Company.OrgNumber" class="text-danger" /> 
            </div>        
            <button type="button" class="btn btn-primary" @onclick="() => RetrieveBrreg(Company.OrgNumber)">Retrieve from brreg</button>
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label> 
                <InputText id="name" @bind-Value="Company.Name" class="form-control" /> 
                <ValidationMessage For="() => Company.Name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="adress" class="form-label">Adress:</label> 
                <InputText id="adress" @bind-Value="Company.Adress" class="form-control" /> 
                <ValidationMessage For="() => Company.Adress" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="areacode" class="form-label">AreaCode:</label> 
                <InputText id="areacode" @bind-Value="Company.AreaCode" class="form-control" /> 
                <ValidationMessage For="() => Company.AreaCode" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="city" class="form-label">City:</label> 
                <InputText id="city" @bind-Value="Company.City" class="form-control" /> 
                <ValidationMessage For="() => Company.City" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="emailadress" class="form-label">EmailAdress:</label> 
                <InputText id="emailadress" @bind-Value="Company.EmailAdress" class="form-control" /> 
                <ValidationMessage For="() => Company.EmailAdress" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="phonenumber" class="form-label">PhoneNumber:</label> 
                <InputText id="phonenumber" @bind-Value="Company.PhoneNumber" class="form-control" /> 
                <ValidationMessage For="() => Company.PhoneNumber" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/companies">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Company Company { get; set; } = new();
    private static readonly HttpClient client = new HttpClient();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private string warningMessage;

    private async Task AddCompany()
    {
        using var context = DbFactory.CreateDbContext();
        // Check if OrgNumber already exists
        var existingCompany = await context.Company
            .FirstOrDefaultAsync(c => c.OrgNumber == Company.OrgNumber);

        if (existingCompany != null)
        {
            // OrgNumber already exists, display a warning
            warningMessage = "A company with this OrgNumber already exists.";
        }
        else
        {
            // OrgNumber does not exist, proceed to add the company
            context.Company.Add(Company);
            await context.SaveChangesAsync();
            NavigationManager.NavigateTo("/companies");
        }
    }
    private async Task RetrieveBrreg(string orgNumber)
    {
        if (!string.IsNullOrEmpty(orgNumber))
        {
            Company.OrgNumber=orgNumber.Replace(" ", "");
            string url = $"https://data.brreg.no/enhetsregisteret/api/enheter/{Company.OrgNumber}";
            var response = await client.GetStringAsync(url);
            if (!string.IsNullOrEmpty(response))
            {
                var data = JObject.Parse(response);

                Company.Name = CleanString(data["navn"]?.ToString());
                Company.Adress = CleanString(data["forretningsadresse"]?["adresse"]?.ToString());
                Company.City = CleanString(data["forretningsadresse"]?["poststed"]?.ToString());
                Company.AreaCode = CleanString(data["forretningsadresse"]?["postnummer"]?.ToString());
                Company.PhoneNumber = CleanString(data["telefon"]?.ToString());
                Company.EmailAdress = CleanString(data["epost"]?.ToString());
            }
        }
    }

    private string CleanString(string ?input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return input;
        }
        return input.Replace("[", "").Replace("]", "").Replace("\"", "").Trim();
    }

}
